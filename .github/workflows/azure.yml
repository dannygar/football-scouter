# This workflow will build and push a node.js application to an Azure Web App when a release is created.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
on: push

env:
  AZURE_WEBAPP_NAME: footscouterapp    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'build'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '12.x'                # set this to the node version to use
  CI: false
  REACT_APP_CLIENT_APP_ID: ${{ env.REACT_APP_CLIENT_APP_ID }}
  REACT_APP_API_ID: ${{ env.REACT_APP_API_ID }}
  REACT_APP_TENANT_ID: ${{ env.REACT_APP_TENANT_ID }}
  REACT_APP_API_URL: ${{ env.REACT_APP_API_URL }}
  REACT_APP_STANDINGS_GAMES: ${{ env.REACT_APP_STANDINGS_GAMES }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install, build, and test
      run: |
        # Build and test the project, then
        # deploy to Azure Web App.
        npm install
        npm run build --if-present
        # npm run test --if-present
    - name: add process.json
      run: |
       echo '{ script: "serve", env: { PM2_SERVE_SPA: "true", PM2_SERVE_HOMEPAGE: "/index.html" } }' >> build/process.json
    - name: add .env
      run: |
       echo 'REACT_APP_CLIENT_APP_ID=${{ env.REACT_APP_CLIENT_APP_ID }}' >> .env
    - name: Environment variables to Dotenv
      # You may pin to the exact commit or the version.
      # uses: CallePuzzle/envvar-to-dotenv-action@276ef22ff6e9a7d32a4dc85182dbe2214a377014
      uses: CallePuzzle/envvar-to-dotenv-action@v1.0.0
      with:
        # Comma separated names of environment variables to append to a dotenv file
        variableNames: REACT_APP_CLIENT_APP_ID,REACT_APP_API_ID,REACT_APP_TENANT_ID,REACT_APP_API_URL,REACT_APP_STANDINGS_GAMES
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
