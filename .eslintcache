[{"C:\\Chelsea\\football-scouter\\src\\index.tsx":"1","C:\\Chelsea\\football-scouter\\src\\App.tsx":"2","C:\\Chelsea\\football-scouter\\src\\Components\\AddEvent.tsx":"3","C:\\Chelsea\\football-scouter\\src\\Components\\Navigation.tsx":"4","C:\\Chelsea\\football-scouter\\src\\Components\\EventTable.tsx":"5","C:\\Chelsea\\football-scouter\\src\\Utils\\TypeConversion.ts":"6","C:\\Chelsea\\football-scouter\\src\\Components\\EventTypeDropDown.tsx":"7","C:\\Chelsea\\football-scouter\\src\\Models\\EventModel.tsx":"8"},{"size":691,"mtime":1606686089863,"results":"9","hashOfConfig":"10"},{"size":1598,"mtime":1606884675941,"results":"11","hashOfConfig":"10"},{"size":2242,"mtime":1606691941848,"results":"12","hashOfConfig":"10"},{"size":3341,"mtime":1606884675944,"results":"13","hashOfConfig":"10"},{"size":4641,"mtime":1606686089853,"results":"14","hashOfConfig":"10"},{"size":610,"mtime":1606686089863,"results":"15","hashOfConfig":"10"},{"size":1285,"mtime":1606686089854,"results":"16","hashOfConfig":"10"},{"size":661,"mtime":1606686089854,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"qbg3m0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Chelsea\\football-scouter\\src\\index.tsx",[],["38","39"],"C:\\Chelsea\\football-scouter\\src\\App.tsx",["40"],"C:\\Chelsea\\football-scouter\\src\\Components\\AddEvent.tsx",["41"],"import React, { useState } from 'react'\r\nimport '../Styles/App.css';\r\nimport { EventType, IEvent } from '../Models/EventModel'\r\nimport EventTypeDropDown from './EventTypeDropDown'\r\n\r\n  \r\ntype Props = { \r\n  saveEvent: (e: React.FormEvent, formData: IEvent | any) => void \r\n}\r\n\r\nconst AddEvent: React.FC<Props> = ({ saveEvent }) => {\r\n  const [formData, setFormData] = useState<IEvent | {}>()\r\n\r\n  const handleForm = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.currentTarget.id]: e.currentTarget.value,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <form className='Form' onSubmit={(e) => saveEvent(e, formData)}>\r\n        <div>\r\n            <div>\r\n              <label htmlFor='time'>Event Time</label>\r\n              <input onChange={handleForm} type='text' id='time' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='advTeam'>Adv Team</label>\r\n              <input onChange={handleForm} type='text' id='advTeam' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='eventType'>Event Type</label>\r\n              <EventTypeDropDown onChange={handleForm} type='number' id='eventType' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='position'>Position</label>\r\n              <input onChange={handleForm} type='number' id='position' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='significance'>Significance</label>\r\n              <input onChange={handleForm} type='number' id='significance' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='credit'>Credit</label>\r\n              <input onChange={handleForm} type='string' id='credit' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='blame'>Blame</label>\r\n              <input onChange={handleForm} type='string' id='blame' />\r\n            </div>\r\n            <div>\r\n              <label htmlFor='comments'>Comments</label>\r\n              <input onChange={handleForm} type='string' id='comments' />\r\n            </div>\r\n        </div>\r\n        <button disabled={formData === undefined ? true: false} >Add</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddEvent\r\n",["42","43"],"C:\\Chelsea\\football-scouter\\src\\Components\\Navigation.tsx",["44","45","46","47","48"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Nav, initializeIcons, INavLink } from '@fluentui/react'\r\nimport GameManager from './GameManager'\r\nimport { IEvent } from '../Models/EventModel'\r\n\r\n// Global NavBar context\r\nimport { NavBarContext, navBarContext } from '../NavBar/NavBar.Context'\r\nimport { useMenu } from '../NavBar/NavBar.Hook'\r\n\r\nconst navigationStyles = {\r\n    root: {\r\n      height: '100vh',\r\n      boxSizing: 'border-box',\r\n      border: '1px solid #eee',\r\n      overflowY: 'auto',\r\n      paddingTop: '10vh',\r\n    },\r\n  }\r\n  \r\nconst links = [\r\n    {\r\n      links: [\r\n        {\r\n            name: 'Dashboard',\r\n            key:'dash',\r\n            url: '/dashboard',\r\n            iconProps: {\r\n                iconName: 'News',\r\n                styles: {\r\n                    root: {\r\n                        fontSize: 20,\r\n                        color: '#106ebe',\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'Stats',\r\n            key: 'stats',\r\n            url: '/',\r\n            iconProps: {\r\n                iconName: 'PowerBILogo',\r\n                styles: {\r\n                    root: {\r\n                        fontSize: 20,\r\n                        color: '#106ebe',\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'Standing',\r\n            key: 'stand',\r\n            url: '/',\r\n            iconProps: {\r\n                iconName: 'PeopleAlert',\r\n                styles: {\r\n                    root: {\r\n                        fontSize: 20,\r\n                        color: '#106ebe',\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'Rules',\r\n            key: 'rules',\r\n            url: '/',\r\n            iconProps: {\r\n                iconName: 'Settings',\r\n                styles: {\r\n                    root: {\r\n                        fontSize: 20,\r\n                        color: '#106ebe',\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'Games',\r\n            key: 'games',\r\n            url: '/games',\r\n            iconProps: {\r\n                iconName: 'Soccer',\r\n                styles: {\r\n                    root: {\r\n                        fontSize: 20,\r\n                        color: '#106ebe',\r\n                    },\r\n                }\r\n            }\r\n        },\r\n    ],\r\n    },\r\n]\r\n\r\ntype NavProps = {\r\n    selectedKey: string\r\n}\r\n  \r\nconst Navigation: React.FC<NavProps> = (props) => {\r\n    // Set selected Menu\r\n    const { setMenuKey } = useContext(navBarContext)\r\n    const [menuKey, setCurrentMenuKey] = useState<string>(useMenu().selectedMenu)\r\n\r\n    initializeIcons();\r\n\r\n    const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\r\n        if (item && item.key) {\r\n            setMenuKey(item.key)\r\n            setCurrentMenuKey(item.Key)\r\n            console.log(`menu key=${item.key}`)\r\n        }\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setCurrentMenuKey(props.selectedKey)\r\n    // },[])\r\n\r\n\r\n    return (\r\n        <Nav\r\n            onLinkClick={onLinkClick}\r\n            groups={links}\r\n            selectedKey={props.selectedKey}\r\n            styles={navigationStyles}\r\n        />\r\n    )\r\n}\r\n\r\n  \r\nexport default Navigation","C:\\Chelsea\\football-scouter\\src\\Components\\EventTable.tsx",[],"C:\\Chelsea\\football-scouter\\src\\Utils\\TypeConversion.ts",[],"C:\\Chelsea\\football-scouter\\src\\Components\\EventTypeDropDown.tsx",[],"C:\\Chelsea\\football-scouter\\src\\Models\\EventModel.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":17,"column":10,"nodeType":"55","messageId":"56","endLine":17,"endColumn":16},{"ruleId":"53","severity":1,"message":"57","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":19},{"ruleId":"49","replacedBy":"58"},{"ruleId":"51","replacedBy":"59"},{"ruleId":"53","severity":1,"message":"60","line":1,"column":29,"nodeType":"55","messageId":"56","endLine":1,"endColumn":38},{"ruleId":"53","severity":1,"message":"61","line":3,"column":8,"nodeType":"55","messageId":"56","endLine":3,"endColumn":19},{"ruleId":"53","severity":1,"message":"62","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":16},{"ruleId":"53","severity":1,"message":"63","line":7,"column":10,"nodeType":"55","messageId":"56","endLine":7,"endColumn":23},{"ruleId":"53","severity":1,"message":"64","line":104,"column":12,"nodeType":"55","messageId":"56","endLine":104,"endColumn":19},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'events' is assigned a value but never used.","Identifier","unusedVar","'EventType' is defined but never used.",["65"],["66"],"'useEffect' is defined but never used.","'GameManager' is defined but never used.","'IEvent' is defined but never used.","'NavBarContext' is defined but never used.","'menuKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]